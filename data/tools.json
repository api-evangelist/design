[
	{
		"tool_id": "Q3CecrFxrw4TISB116tCwD6RHWGA3yETHXKPa4b3Kgea108xK6ybT116RmUB2nadYHEXiWF5eO3LJJFeH116fWp116ZKAg117117",
		"name": "18F API Standards",
		"user": "",
		"details": "18F is a technology team inside the US federal government. 18F is very API-focused: our first project was an API for business opportunities. This document captures 18Fs view of API best practices and standards. We aim to incorporate as many of them as possible into our work. APIs, like other web applications, vary greatly in implementation and design, depending on the situation and the problem the application is solving.",
		"post_date": "2014-08-22 12:43:00",
		"url": "https://github.com/18F/api-standards",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/blog/logo-18f.png",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design",
			"API Design Guide"
		]
	},
	{
		"tool_id": "123KEubtan6h5rv5VY116MP123123PiGxuZKxil2E076G123Fy8aG2zUkWekjk8YWSgaakJlHMruIMfRdSRcJZYGvMVjg3ng117117",
		"name": "API Blueprint",
		"user": "apiaryio",
		"details": "API Blueprint is a documentation-oriented API description language. A couple of semantic assumptions over the plain Markdown. API Blueprint is perfect for designing your Web API and its comprehensive documentation but also for quick prototyping and collaboration. It is easy to learn and even easier to read &ndash; after all it is just a form of plain text. API Blueprint, its parser, and most of its tools are completely open sourced so you dont have to worry about vendor lock-in. This also means you can freely integrate API Blueprint into any type of product, commercial or not.",
		"post_date": "2015-05-14 12:42:22",
		"url": "https://github.com/apiaryio/api-blueprint/",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/bw-api-blueprint-icon.png",
		"forks": "629",
		"followers": "2155",
		"watchers": "2155",
		"tags": [
			"Specification",
			"Design",
			"Definitions",
			"API Blueprint Core",
			"API Blueprint"
		]
	},
	{
		"tool_id": "tM3sCmqkVzJkq8kScyA9ztPm3AnX4shEIiXgiXpZs7NsivokVGH9vq1236whtW60KkMoozrtQXvEgCt1YuysfEpg117117",
		"name": "API Blueprint Sublime Plugin",
		"user": "apiaryio",
		"details": "API Blueprint Sublime Text plugin",
		"post_date": "2015-05-14 12:42:47",
		"url": "https://github.com/apiaryio/api-blueprint-sublime-plugin/",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/sublime-dark-icon.png",
		"forks": "6",
		"followers": "72",
		"watchers": "72",
		"tags": [
			"IDE",
			"GitHub",
			"Design",
			"Design",
			"API Blueprint Core",
			"API Blueprint"
		]
	},
	{
		"tool_id": "PVQ6sFWyjEsqHszCVrjgtt2sL7YvFoUj0zSSCp123bK5P5Qkbf5m2Fa0WCUOyBlsomz4dUCJXYJ116RZHEtGx76iaQ117117",
		"name": "Atom Editor API Blueprint Preview",
		"user": "",
		"details": "The Atom Editor API Blueprint preview is a plugin for the Atom editor that allows you to render HTML representation of API Blueprint in the right of the current open Atom editor using CTRL-SHIFT-A.&nbsp;This plugin requires Agilo&nbsp;to be installed and available in your path.",
		"post_date": "2014-06-15 13:17:56",
		"url": "https://atom.io/packages/api-blueprint-preview",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/atom-icon.png",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"IDE",
			"Design",
			"Design",
			"API Blueprint"
		]
	},
	{
		"tool_id": "qM1bK18l6K740YfeSGZktYr0UVO42NV9KBZkBsUZ4c9BLggPr2y5QP7ZIfJaWZzNVuYRvfwKCSUxdgZPFHzo8g117117",
		"name": "Australian Government Digital Transformation Office (AusDTO) API Design Guide",
		"user": "",
		"details": "The DTO is working to release draft API design guide describing contemporary best practices in API design and developer empathy. The final document will be mandatory policy that all Commonwealth agencies must follow, and that citizens could be entitled to expect. The agency has published a version control version on Github with a public ticket system for issues and support, and invited our users to help make it better.",
		"post_date": "2015-09-01 18:31:42",
		"url": "http://apiguide.readthedocs.org/en/latest/",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/dto-logo.png",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design",
			"API Design Guide"
		]
	},
	{
		"tool_id": "116fyWva116eQRMi54zXjiQk123z7DykRoNc0D8wCPPQgBups1QIHnYfOArbg1b5HGIkq4116Qcfr28etgwIXQU0maSq0Q117117",
		"name": "Cisco API Design Guide",
		"user": "",
		"details": "Several Cisco business units have teamed up to create this RESTful API design guide. Collectively, this includes&nbsp;DevNet,&nbsp;Collaboration, and the Application Platform Group. The objective of this document is to act as a guide to define the future, it does not represent the current state of all REST APIs at Cisco.",
		"post_date": "2015-08-23 15:20:20",
		"url": "https://github.com/CiscoDevNet/api-design-guide",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/cisco-dev-net.png",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design",
			"API Design Guide"
		]
	},
	{
		"tool_id": "116RdxR2FRb0Ph3njS8ElJy1sPmC8yLv8vHKzPFCsKRVxIg4uuDdcejW123vSwXI2dTxtXKtv2oJNtwwQWs4j116p1kQ117117",
		"name": "Cloud Foundry Cloud Controller API Style Guide",
		"user": "",
		"details": "This document serves as a style guide for the Cloud Controller API. It is intended to act as a repository for patterns and best practices when designing and developing new API endpoints. This is a living document; It will change over time as we learn more about our users and develop features.",
		"post_date": "2015-09-04 11:32:51",
		"url": "https://github.com/cloudfoundry/cc-api-v3-style-guide",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/cloud-foundry-logo.png",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design",
			"API Design Guide"
		]
	},
	{
		"tool_id": "ckhj2ZOpvUDFDOumu1hM3pDBYz8LaCB5oHY7h0JlMCjC7dRwZBHO7mG1smNFz0X4qwzVhvUi2ZjKSUioI24EVg117117",
		"name": "Deployd",
		"user": "deployd",
		"details": "Deployd is the simplest way to build realtime APIs for web and mobile apps. Ready-made, configurable Resources add common functionality to a Deployd backend, which can be further customized with JavaScript Events.",
		"post_date": "2015-06-30 17:09:16",
		"url": "https://github.com/deployd/deployd",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/bw-deployd.png",
		"forks": "461",
		"followers": "3342",
		"watchers": "3342",
		"tags": [
			"Design",
			"Design"
		]
	},
	{
		"tool_id": "BY8jiMqwz2J8oXKAP3i4WadmXLiFc0OJJdiB0V4uPsTG58pFilmFrXR3pFLMlF03LVZfyHmgP2Bct8S8msEMLg117117",
		"name": "Haufe Group API Design Guide",
		"user": "",
		"details": "Purpose of this style guide is to gather a list of rules, best practices, resources and our way of creating REST APIs in Haufe Group. The style guide addresses API Designers, mostly developers and architects, who want to design an API. Intention is to ease the design process by providing helpful rules to create a succesful API that your customers will love.",
		"post_date": "2015-07-21 19:31:35",
		"url": "http://haufe-lexware.github.io/api-style-guide/",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/Logo_Haufe_Gruppe.gif",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design",
			"API Design Guide"
		]
	},
	{
		"tool_id": "muFeqFlAlzwODaKgyvxvZwDRMiDDe4fmDmG9GxfYPEsnO2bPp116wR58123116ktvHhrjBMGDjrFBZE9K2mwB1cG8bRw117117",
		"name": "Heroku - API Design Guide",
		"user": "",
		"details": "Heroku has provide their own set of what they call HTTP+JSON API design practices, which I think describes what we do much better than just web API. The guide is designed for internal and external usage, and looking to provide some consistency in API design, that anyone can follow.",
		"post_date": "2014-08-22 12:41:18",
		"url": "https://github.com/interagent/http-api-design",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/blog/heroku-logo.png",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design",
			"API Design Guide"
		]
	},
	{
		"tool_id": "rOMdAREnP2xMOTxAY5MxEgwflrI8B0GBJYR1165ybxE123010HUn4Sf1Q1V0L7i3n1239S0cXeaKU123DGJgufzYeEc3Gg117117",
		"name": "Paypal API Design Standards",
		"user": "",
		"details": "Paypal has developed their own API design standards, providing a common blueprint for their teams to follow, while also transparently sharing with their API community, and the wider API industry to follow.",
		"post_date": "2015-05-13 14:39:21",
		"url": "https://github.com/paypal/api-standards/blob/master/api-style-guide.md",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/paypal-logo.png",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design",
			"API Design Guide"
		]
	},
	{
		"tool_id": "jrJdFzccx123U0ZnWpaaU123lcFImcbV1aD8h9Rl3GLuTfWZseM1ewyp2O3pRAdfkwG9XT7xbTP6FOBx7FVI4Jbr8A117117",
		"name": "RAML API Designer",
		"user": "",
		"details": "API Designer is a standalone/embeddable editor for RAML (RESTful API Modeling Language) written in JavaScript using Angular.JS, which by default, uses an in-browser filesystem stored in HTML5 Localstorage. Mulesoft provides a cloud version of the editor as part of their larger API suite.",
		"post_date": "2014-06-15 13:04:18",
		"url": "https://github.com/mulesoft/api-designer",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/mulesoft-api-design-editor.jpeg",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design",
			"Design"
		]
	},
	{
		"tool_id": "Rq6F3C0T2Zkm9GF1ctibIl6qY5fuYvKQpjt1geY9jzM123bE7Bz8PxBKDCCf751165Q6sxP0tEI9kpvb3123xkl4pKdg117117",
		"name": "RAML API Notebook",
		"user": "",
		"details": "API Notebook is a web-based, persistent, JavaScript scripting workspace that enables live testing and exploring of APIs, and saving API use cases as markdown gists, so they are versioned, forkable and shareable. Its an example of literate programming. It is provided under the open-source CPAL license.",
		"post_date": "2014-06-15 13:05:46",
		"url": "https://github.com/mulesoft/api-notebook",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/blog/raml-logo.jpg",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design Notebook",
			"Design"
		]
	},
	{
		"tool_id": "Hvof3w4XF1beSuFuKslQ2y10WGbQ0U06JtYvWP30yvW917PcENQFxhyc9n9RyS3TH3cfIhpUKc74gEi4CBPUgQ117117",
		"name": "RAML Specification",
		"user": "",
		"details": "RESTful API Modeling Language (RAML) is a simple and succinct way of describing practically-RESTful APIs. It encourages reuse, enables discovery and pattern-sharing, and aims for merit-based emergence of best practices. The goal is to help our current API ecosystem by solving immediate problems and then encourage ever-better API patterns. RAML is built on broadly-used standards such as YAML and JSON and is a non-proprietary, vendor-neutral open spec.",
		"post_date": "2015-06-30 14:05:03",
		"url": "http://raml.org",
		"blog_url": "http://blog.raml.org/",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/raml-logo.jpg",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Specification",
			"RAML",
			"Design",
			"Definitions"
		]
	},
	{
		"tool_id": "Vh9VKCjY6q1tnDeCr6123xxIxsFgxFq7iB116PlTmxIhYkISJTlmbxsGJuClA8n679HZj3IsYlNb6zGet46xPDS0WA117117",
		"name": "RAML Store",
		"user": "",
		"details": "RAML Store provides a simple storage API plus a persistence plugin which enables you to run the RAML API Designer locally (rather than using a cloud service) and still be able to manage and collaborate on your design. The service is built with node.js, using express and mongodb.",
		"post_date": "2014-06-15 13:08:19",
		"url": "https://github.com/brianmc/raml-store",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/blog/raml-logo.jpg",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design Editor",
			"Design"
		]
	},
	{
		"tool_id": "nyGgwbctkagEEb6123iFkBcatI0DHuQ2mHCVWLzAGe123V6mb1gaEfjJonib0Yn30U6q123FnwF5rjoyzIwps1TyrDRQ117117",
		"name": "Realtime API Design Guide from Fanout",
		"user": "",
		"details": "An API Design Guide dedicated to helping you understand the common design approaches, as well as the pros and cons of realtime API design, showcasing the implementations of 16 public real-time APIs--developed by Fanout.io",
		"post_date": "2015-06-30 13:26:19",
		"url": "http://blog.fanout.io/2015/04/02/realtime-api-design-guide/",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/fanout_icon.png",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design",
			"API Design Guide"
		]
	},
	{
		"tool_id": "53oCYUICBD7Ofsqn8D5mDRqXl123yEajbT116NHBigtJEPk26i0UTorgw5123sd81HaxRceysEbQXHSRoS3123ApDmIycw117117",
		"name": "Swagger Editor",
		"user": "",
		"details": "Swagger Editor lets you edit API specifications in YAML inside your browser and to preview documentations in real time. Valid Swagger JSON descriptions can then be generated and used with the full Swagger tooling (code generation, documentation, etc).",
		"post_date": "2014-06-29 12:12:09",
		"url": "http://editor.swagger.wordnik.com/",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/swagger-api-editor-screenshot.png",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design Editor",
			"Design"
		]
	},
	{
		"tool_id": "iVrvIfRRB83hZtjxx5xjrln3eFLb0cEtUq22hO6BbEGkbR5naGOz2tow36WUYhRxjS9Iil4ASTFLsDo123Vkuwvw117117",
		"name": "Swagger Specification",
		"user": "swagger-api",
		"details": "Swagger is a simple yet robust representation of a RESTful API, with a large ecosystem of API tooling that includes code generation, interactive documentation, and much more. Currently &nbsp;there are housands of developers supporting Swagger in almost every modern programming language and deployment environment, using the&nbsp;100% open source software and specification.",
		"post_date": "2015-03-28 18:49:27",
		"url": "https://github.com/swagger-api/swagger-spec/",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/bw-swagger-round.png",
		"forks": "281",
		"followers": "1551",
		"watchers": "1551",
		"tags": [
			"Swagger-Core",
			"Swagger",
			"Specification",
			"Design",
			"Definitions"
		]
	},
	{
		"tool_id": "ahU3D3tfeXs1FlGeDRlg0jpVFTKJ116qQhdEmz2E3vazwZchi38vG1H123yHZTbaMHIfiZEdmI4aKQTKbYWdsUgryA117117",
		"name": "The RESTed NARWHL",
		"user": "",
		"details": "NARWHL is a framework intended to provide a roadmap for those needing to implement an API using current best practices but flexible enough to grow into the future. This guide contains a set of API design recommendations you can implement today with the confidence that your API will be RESTful (level 3 according to the Richardson Maturity Model) and able to adapt to future iterations while still making it easier for developers to use.",
		"post_date": "2015-06-30 13:22:29",
		"url": "http://www.narwhl.com/",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/the-rested-narwhl.png",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design",
			"API Design Guide"
		]
	},
	{
		"tool_id": "1EljaZnCZQdtMV116LRqmrTBc9zEa7XCm6thqf123ILHrkyL123elnG2XN8EM2c5MUEjGzNitry2kVRqFOi6LKB3yGXg117117",
		"name": "UK Government Service Design Manual for APIs",
		"user": "",
		"details": "Martha Lane Fox report called for government to act as a wholesaler, as well as the retail shop front, for services and content by mandating the development and opening up of Application Programme Interfaces (APIs) to third parties -- this section is a set of guiding principles for exposing a digital service as an API.",
		"post_date": "2015-06-30 14:09:37",
		"url": "https://www.gov.uk/service-manual/making-software/apis.html",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/gov-uk.png",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design",
			"API Design Guide"
		]
	},
	{
		"tool_id": "tMkvZdIgF7aaLVgU2K116FPLcFhhK0tn3MMW75udrMzh425cPRlQSAEpLIrvWOLnTrLvfhXNmHnnWPdnOgHaLHBg117117",
		"name": "White House Web API Standards",
		"user": "",
		"details": "This document provides guidelines and examples for White House Web APIs, encouraging consistency, maintainability, and best practices across applications. White House APIs aim to balance a truly RESTful API interface with a positive developer experience (DX).",
		"post_date": "2015-06-30 14:12:08",
		"url": "https://github.com/WhiteHouse/api-standards",
		"blog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tool/white-house-seal.jpg",
		"forks": 0,
		"followers": 0,
		"watchers": 0,
		"tags": [
			"Design",
			"API Design Guide"
		]
	}
]