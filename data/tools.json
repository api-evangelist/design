{"tools":[{"id":"134","name":"ALPS - Application-Level Profile Semantics","summary":"The purpose of Application-Level Profile Semantics (ALPS) is to document the application-level semantics of a particular implementation. This is accomplished by describing elements of response representations for a target media type. For example identifying markup elements returned (i.e. semantic HTML ala Microformats) and state transitions (i.e. HTML.A and HTML.FORM elements) that advance the sta","details":"The purpose of Application-Level Profile Semantics (ALPS) is to document the application-level semantics of a particular implementation. This is accomplished by describing elements of response representations for a target media type. For example identifying markup elements returned (i.e. semantic HTML ala Microformats) and state transitions (i.e. HTML.A and HTML.FORM elements) that advance the state of the current application.","website":"http:\/\/amundsen.com\/hypermedia\/profiles\/","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/blog\/mca-icon-e.jpg","tags":"API Design"},{"id":"88","name":"Apiary API Blueprint","summary":"API Blueprint is lightweight, documentation oriented domain specific language (DSL) for easily designing, building and documenting REST API.API Blueprint is a Markdown.It is easy to learn and read, perfect for comprehensive documentation but also for quick prototyping and collaboration.","details":"API Blueprint is lightweight, documentation oriented domain specific language (DSL) for easily designing, building and documenting REST API.API Blueprint is a Markdown.It is easy to learn and read, perfect for comprehensive documentation but also for quick prototyping and collaboration.","website":"https:\/\/github.com\/apiaryio\/api-blueprint","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/tools\/apiary-io-logo.png","tags":"API-Design"},{"id":"87","name":"Apiary Blueprint Parser","summary":"A JavaScript parser ofApiary API blueprints. Uses Node.js then in browser, include the browser version of the parser in your web page or application using the &lt;script&gt; tag. To parse an API blueprint, just call the parse method and pass the blueprint as a parameter. The method will return an object representing the parsed blueprint or throw an exception if the input is invalid.","details":"A JavaScript parser ofApiary API blueprints. Uses Node.js then in browser, include the browser version of the parser in your web page or application using the &lt;script&gt; tag. To parse an API blueprint, just call the parse method and pass the blueprint as a parameter. The method will return an object representing the parsed blueprint or throw an exception if the input is invalid.","website":"https:\/\/github.com\/apiaryio\/blueprint-parser","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/tools\/apiary-io-logo.png","tags":"API-Design"},{"id":"141","name":"Atom Editor API Blueprint Preview","summary":"A plugin for the Atom editor to show the rendered HTML API Blueprint to the right of the current editor using ctrl-shift-a.","details":"A plugin for the Atom editor to show the rendered HTML API Blueprint to the right of the current editor using ctrl-shift-a.","website":"https:\/\/atom.io\/packages\/api-blueprint-preview","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/blog\/api-blueprint.png","tags":"API Design"},{"id":"89","name":"Enunciate","summary":"Enunciate is an engine for dramatically enhancing your Java Web service API. It's simple. You develop your Web service API using standard Java technologies and attach Enunciate to your build process. Suddenly, your Web service API is boasting some pretty impressive features. Enunciate is an open-source project, licenced under the Apache License, version 2.0.Provides ull HTML documentation of your ","details":"Enunciate is an engine for dramatically enhancing your Java Web service API. It's simple. You develop your Web service API using standard Java technologies and attach Enunciate to your build process. Suddenly, your Web service API is boasting some pretty impressive features. Enunciate is an open-source project, licenced under the Apache License, version 2.0.Provides ull HTML documentation of your services, scraped from your JavaDocs. Client-side libraries (e.g. Java, .NET, iPhone, Ruby, Flex, AJAX, GWT, etc.) for developers who want to interface with your API, as well as interface Definition Documents (e.g. WSDL, WADL, XML-Schema, etc.)","website":"http:\/\/enunciate.codehaus.org\/","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/blog\/enunciate-logo.png","tags":"API-Design"},{"id":"69","name":"I\/O Docs","summary":"I\/O Docs is a live interactive documentation system for RESTful web APIs. By defining APIs at the resource, method and parameter levels in a JSON schema, I\/O Docs will generate a JavaScript client interface. API calls can be executed from this interface, which are then proxied through the I\/O Docs server with payload data cleanly formatted (pretty-printed if JSON or XML).","details":"I\/O Docs is a live interactive documentation system for RESTful web APIs. By defining APIs at the resource, method and parameter levels in a JSON schema, I\/O Docs will generate a JavaScript client interface. API calls can be executed from this interface, which are then proxied through the I\/O Docs server with payload data cleanly formatted (pretty-printed if JSON or XML).","website":"https:\/\/github.com\/mashery\/iodocs","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/blog\/io-docs-logo.jpg","tags":"API Design,API Discovery,API Management,API-Design,Documentation,Interactive Documentation"},{"id":"136","name":"RAML API Designer","summary":"API Designer is a web-based API development tool that allows API providers to design their API quickly, efficiently, and consistently, and socialize the design. It consists of a RAML editor side-by-side with an embedded RAML console (the API Console). It is provided under the open-source CPAL license.","details":"API Designer is a web-based API development tool that allows API providers to design their API quickly, efficiently, and consistently, and socialize the design. It consists of a RAML editor side-by-side with an embedded RAML console (the API Console). It is provided under the open-source CPAL license.","website":"https:\/\/github.com\/mulesoft\/api-designer","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/blog\/raml-logo.jpg","tags":"API Design"},{"id":"137","name":"RAML API Notebook","summary":"API Notebook is a web-based, persistent, JavaScript scripting workspace that enables live testing and exploring of APIs, and saving API use cases as markdown gists, so they are versioned, forkable and shareable. It's an example of literate programming. It is provided under the open-source CPAL license.","details":"API Notebook is a web-based, persistent, JavaScript scripting workspace that enables live testing and exploring of APIs, and saving API use cases as markdown gists, so they are versioned, forkable and shareable. It's an example of literate programming. It is provided under the open-source CPAL license.","website":"https:\/\/github.com\/mulesoft\/api-notebook","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/blog\/raml-logo.jpg","tags":"API Design"},{"id":"138","name":"RAML Store","summary":"RAML Store provides a simple storage API plus a persistence plugin which enables you to run the RAML API Designer locally (rather than using a cloud service) and still be able to manage and collaborate on your design. The service is built with node.js, using express and mongodb.","details":"RAML Store provides a simple storage API plus a persistence plugin which enables you to run the RAML API Designer locally (rather than using a cloud service) and still be able to manage and collaborate on your design. The service is built with node.js, using express and mongodb.","website":"https:\/\/github.com\/brianmc\/raml-store","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/blog\/raml-logo.jpg","tags":"API Design"},{"id":"124","name":"RESTful API Modeling Language","summary":"RESTful API Modeling Language (RAML) is a simple and succinct way of describing practically-RESTful APIs. It encourages reuse, enables discovery and pattern-sharing, and aims for merit-based emergence of best practices. The goal is to help our current API ecosystem by solving immediate problems and then encourage ever-better API patterns. RAML is built on broadly-used standards such as YAML and JS","details":"RESTful API Modeling Language (RAML) is a simple and succinct way of describing practically-RESTful APIs. It encourages reuse, enables discovery and pattern-sharing, and aims for merit-based emergence of best practices. The goal is to help our current API ecosystem by solving immediate problems and then encourage ever-better API patterns. RAML is built on broadly-used standards such as YAML and JSON and is a non-proprietary, vendor-neutral open spec.","website":"http:\/\/raml.org\/","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/blog\/raml-logo.jpg","tags":"API Design,API-Design"},{"id":"140","name":"Rspec APIBlueprint","summary":"Autogeneration of API documentation using the Blueprint format from request specs.","details":"Autogeneration of API documentation using the Blueprint format from request specs.","website":"https:\/\/github.com\/playround\/rspec_api_blueprint","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/blog\/api-blueprint.png","tags":"API Design"},{"id":"74","name":"Swagger Core","summary":"Swagger is a specification and complete framework implementation for describing, producing, consuming, and visualizing RESTful web services. The overarching goal of Swagger is to enable client and documentation systems to update at the same pace as the server. The documentation of methods, parameters and models can be tightly integrated into the server code, allowing APIs to always stay in sync.","details":"Swagger is a specification and complete framework implementation for describing, producing, consuming, and visualizing RESTful web services. The overarching goal of Swagger is to enable client and documentation systems to update at the same pace as the server. The documentation of methods, parameters and models can be tightly integrated into the server code, allowing APIs to always stay in sync.","website":"https:\/\/github.com\/wordnik\/swagger-core\/wiki","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/tools\/swagger-logo-green.png","tags":"API Design,API Discovery,API-Design,API-Discovery"},{"id":"139","name":"Swagger2RAML","summary":"A utility to generate RAML documentation from Swagger JSON.","details":"A utility to generate RAML documentation from Swagger JSON.","website":"https:\/\/github.com\/8x8Cloud\/swagger2raml","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/blog\/raml-logo.jpg","tags":"API Design"}],"published":"06\/15\/2014"}